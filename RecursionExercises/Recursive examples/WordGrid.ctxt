#BlueJ class context
comment0.target=WordGrid
comment0.text=\ Program\:\ \ \ \ \ \ Lab\ 9\ -\ \ Finding\ Words\ in\ a\ 5x5\ Grid\ in\ Non-straight\ Lines\r\n\ \ Author\:\ Gill,\ pondy\r\n\ \ Date\:\ February\ 1999\r\n\ \ Description\:\ \ The\ program\ searchs\ for\ a\ user\ entered\ string\ in\ a\ 5x5\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ grid\ which\ is\ read\ from\ a\ file.\ The\ string\ need\ not\ be\ in\ a\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ straight\ line.\ The\ program\ prints\ the\ number\ of\ times\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ string\ appears\ in\ the\ grid.\ Letters\ are\ reused.\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ program\ gives\ the\ user\ the\ following\ options\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\ load\ a\ grid\ from\ a\ file,\ which\ is\ then\ displayed\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\ enter\ the\ search\ word\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ We\ assume\ the\ file\ is\ going\ to\ be\ of\ the\ form\ of\ 5\ lines\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ each\ containing\ five\ characters.\ \ Excess\ characters\ on\ a\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ line\ are\ ignored,\ as\ are\ excess\ lines.\ \ If\ the\ file\ does\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ not\ contain\ either\ five\ lines\ or\ five\ characters\ on\ each\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ the\ first\ five\ lines\ the\ file\ is\ considered\ invalid.\r\n\r\n
comment1.params=
comment1.target=WordGrid()
comment1.text=\ Construct\ a\ new\ WordGrid\ object\r\n\ and\ set\ up\ the\ GUI\r\n
comment10.params=
comment10.target=void\ drawGrid()
comment10.text=\ \r\n\ Display\ the\ grid\ in\ the\ graphics\ output\ region\r\n
comment11.params=row\ col
comment11.target=void\ drawCell(int,\ int)
comment11.text=\ \r\n\ Draw\ the\ cell\:\ a\ square\ with\ a\ character\ in\ the\ middle\r\n
comment12.params=row\ col\ level
comment12.target=void\ highlightCell(int,\ int,\ int)
comment12.text=\ \r\n\ Highlight\ the\ cell\ by\ drawing\ a\ coloured\ square\ inside\ the\ cell.\r\n\ The\ highlight\ depends\ on\ the\ level\ so\ a\ cell\ might\ be\ highlighted\ at\ several\r\n\ different\ levels\ at\ once.\r\n\ The\ greater\ the\ level,\ the\ smaller\ the\ red\ square.\r\n\ Also\ highlights\ the\ character\ of\ the\ searchWord\ being\ looked\ at.\r\n
comment13.params=row\ col\ level
comment13.target=void\ unHighlightCell(int,\ int,\ int)
comment13.text=\ \r\n\ Remove\ the\ highlights\ of\ this\ cell\ at\ this\ and\ any\ higher\ levels\ \r\n
comment14.params=row\ col\ level\ c
comment14.target=void\ highlightCell(int,\ int,\ int,\ java.awt.Color)
comment15.params=
comment15.target=void\ displayWord()
comment16.params=s
comment16.target=void\ report(java.lang.String)
comment17.params=arguments
comment17.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ setupGUI()
comment3.params=
comment3.target=void\ newGrid()
comment4.params=v
comment4.target=void\ setWord(java.lang.String)
comment5.params=
comment5.target=void\ faster()
comment6.params=
comment6.target=void\ slower()
comment7.params=
comment7.target=void\ searchGrid()
comment7.text=\ \r\n\ Find\ the\ word\ in\ the\ grid\r\n
comment8.params=row\ col\ pos
comment8.target=void\ searchWord(int,\ int,\ int)
comment8.text=\r\n\ \ Search\ for\ the\ search\ word\ from\ a\ place.\r\n\ \r\n\ \ Arguments\:\ \ \ \ row\ and\ col\ -\ the\ cell\ to\ look\ in\ (possibly\ outside\ the\ grid\!)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ pos\ \ \ \ \ \ \ \ \ -\ the\ number\ of\ characters\ of\ the\ searchWord\ found\ so\ far\r\n\r\n\ \ Description\:\r\n\ \ \ \ This\ is\ the\ recursive\ find\ method.\r\n\ \ \ \ It\ must\ check\ whether\ the\ row\ and\ col\ are\ a\ valid\ cell\ in\ the\ grid\r\n\ \ \ \ and\ then\ check\ whether\ the\ next\ character\ is\ at\ this\ cell\r\n\ \ \ \ If\ not,\ then\ don't\ search\ any\ further\ from\ this\ cell\r\n\ \ \ \ If\ the\ character\ is\ at\ this\ cell,\ then\r\n\ \ \ \ \ \ if\ this\ was\ the\ last\ character\ of\ the\ searchWord,\ then\ we\ have\ found\ it.\r\n\ \ \ \ \ \ else\ keep\ searching\ for\ the\ rest\ of\ the\ word\ in\ all\ the\ neighbour\ cells\r\n
comment9.params=fname
comment9.target=boolean\ readGridFromFile(java.lang.String)
comment9.text=\r\n\ Read\ the\ grid\ from\ a\ file.\r\n\ Returns\ true\ if\ it\ successfully\ read\ a\ grid\ from\ file,\ otherwise\ returns\ false\r\n
numComments=18
